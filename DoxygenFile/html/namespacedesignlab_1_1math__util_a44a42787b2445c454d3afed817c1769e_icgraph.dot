digraph "designlab::math_util::IsEqual"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="designlab::math_util\l::IsEqual",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="C++において，小数同士の計算は誤差が出てしまう．誤差込みで値が等しいか調べる．"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="HexapodRenderer::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_renderer.html#a8eae43f9a83c964275d97cd9c73d9451",tooltip="ロボットを3D空間に描画する．"];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="GraphicMainAdvance\l::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_advance.html#a6692e76b6ea8bf3bc16f7e22c0feccbb",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="GraphicMainBasic::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_basic.html#a1e698ba2d3c8d10a78d37f1be466b061",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node2 -> Node5 [id="edge4_Node000002_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="GraphicMainGraphViewer\l::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_graph_viewer.html#a14795bbb91d4226833221de9ca9f8d8e",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node2 -> Node6 [id="edge5_Node000002_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="GraphicMainTest::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_test.html#a89739811751658e7ad119ceb81eba60d",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="designlab::Vector2\l::IsZero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdesignlab_1_1_vector2.html#a67434ecbe53d7a4c06d0fdc08e1467ca",tooltip="このベクトルが0ならばtrue"];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="designlab::Vector3\l::IsZero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdesignlab_1_1_vector3.html#a1a61d0a698b66fe9a856d539cec42925",tooltip="x,y,zともに絶対値が許容誤差以下の値ならばtrueを返す．"];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="InterpolatedNodeCreator\l::createInterpolatedNode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_interpolated_node_creator.html#acc9e16ae23501fda19b769660249110d",tooltip="ノード間を補間する"];
  Node9 -> Node10 [id="edge9_Node000009_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="GraphicMainAdvance\l::Update",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_advance.html#ace2690c4ee9863eb356b7dc352cc9c9d",tooltip="描画画面の更新を行う．純粋仮想関数のため，継承先では必ずoverrideする必要がある．"];
  Node1 -> Node11 [id="edge10_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="designlab::Vector2\l::Normalize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdesignlab_1_1_vector2.html#a8899add912014b0eac615bcac1ef95f4",tooltip="このベクトルを正規化したベクトルを返す"];
  Node11 -> Node12 [id="edge11_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="AbstractHexapodStateCalculator\l::CalculateStabilityMargin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_abstract_hexapod_state_calculator.html#a862d9bc1251d1677af060fa8ae3ff8f8",tooltip="安定余裕(Stability Margin))を計算する．詳しくは「不整地における歩行機械の静的安定性評価基準」という論文を読んで欲しい   接地脚を繋いで作られる多角形の辺と重心の距離の最小値を計算す..."];
  Node11 -> Node13 [id="edge12_Node000011_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="ComSelecterHato::GetComFrom\lPolygon",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_selecter_hato.html#a11ffd1a3a180ba1c165291c2847e5dad",tooltip="重心を求める"];
  Node13 -> Node14 [id="edge13_Node000013_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="ComMoveNodeCreatorHato\l::Create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_move_node_creator_hato.html#afbbbd68e3defbeef200f8c4c10013297",tooltip="現在のノードから次のノード群を生成する"];
  Node1 -> Node15 [id="edge14_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="designlab::Vector3\l::Normalize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdesignlab_1_1_vector3.html#a336c7e65ab89217e0a996b0700e050be",tooltip="単位ベクトルを返す．normalizeとは，ベクトルを正規化（単位ベクトルに変換）する操作を表す．   絶対値が0のベクトルの場合，そのまま0ベクトルを返す．"];
  Node1 -> Node16 [id="edge15_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="designlab::RotateVector3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab.html#a88a31cb8dd4fb0891393816ad574b9a8",tooltip="3次元の位置ベクトルを回転させる．"];
  Node16 -> Node17 [id="edge16_Node000016_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="CameraInputController\l::ChangeCameraState",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_input_controller.html#a56c0dbc23365b09d5d0c0349e880e16f",tooltip="キー入力でカメラを動かす．   基本的には毎フレーム呼び出す"];
  Node17 -> Node18 [id="edge17_Node000017_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="CameraGui::Update",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$class_camera_gui.html#a6acd3a19c988ec33ff84572a025ac2cd",tooltip="GUIやカメラの更新を行う"];
  Node18 -> Node10 [id="edge18_Node000018_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node22 [id="edge19_Node000001_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="GraphSearcherHato::\lSearchGraphTree",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graph_searcher_hato.html#afc57792a3ac9346217fcd0a0047e44cf",tooltip="グラフを受け取り，その中から最適な次の動作を出力する．"];
}
