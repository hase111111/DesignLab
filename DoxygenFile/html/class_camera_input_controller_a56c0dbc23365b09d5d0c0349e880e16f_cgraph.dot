digraph "CameraInputController::ChangeCameraState"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="CameraInputController\l::ChangeCameraState",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="キー入力でカメラを動かす．   基本的には毎フレーム呼び出す"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="CameraStateManager\l::AddCameraToTargetLength",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_state_manager.html#ac0bc493a22d452063cc5da47544aa4be",tooltip="カメラの注視する目標の座標からカメラまでの距離を増やす"];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="CameraStateManager\l::GetCameraQuat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_state_manager.html#a688c18d4cc05a744437bfda71980828a",tooltip="カメラの回転を表すクォータニオンを取得する．"];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="CameraStateManager\l::GetCameraViewMode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_state_manager.html#ae36d67f526d5a63ecae8acbefe8d990a",tooltip="カメラのモードを取得する"];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="Mouse::GetDiffPosX",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_mouse.html#aadc3f80b56c350f368d46821d20a40d9",tooltip="マウスカーソルの移動量を取得する．X座標は画面の左端を0として，右向きが正．これはDxlibの仕様なので変更不能．"];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="Mouse::GetDiffPosY",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_mouse.html#a80c810c534e31080c302866442848003",tooltip="マウスカーソルの移動量を取得する．Y座標は画面の上端を0として，下向きが正．これはDxlibの仕様なので変更不能．"];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="CameraStateManager\l::GetFreeTargetPos",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_state_manager.html#ac19a039d496f5a6bc11c4e625ff1a19a",tooltip="注視点を操作する際の，カメラの注視する座標を取得する"];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="Singleton\< Mouse \>\l::GetIns",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_singleton.html#a91badcd3446f8897e73bd1af9c7a37ff",tooltip="インスタンスを取得する．   このクラスを継承したクラスは クラス名::getIns()-> の形式でメンバ関数を呼び出す．"];
  Node1 -> Node9 [id="edge8_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="designlab::Quaternion\l::Normalize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdesignlab_1_1_quaternion.html#a7e53e5872a5a39da9cb6ca40a0c6e91a",tooltip="正規化したクォータニオンを返す   クォータニオンの正規化とは，ノルムを1にすること．   クォータニオンqの正規化は，q / |q| で求められる"];
  Node9 -> Node10 [id="edge9_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="designlab::Quaternion\l::Norm",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdesignlab_1_1_quaternion.html#a17c6bcd41fbd5833c6885bdd170c75d8",tooltip="クォータニオンのノルムを返す   ノルムとは，ベクトルの大きさのこと．クォータニオンのノルムは，w^2 + x^2 + y^2 + z^2 で求められる"];
  Node10 -> Node11 [id="edge10_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="designlab::Quaternion\l::LengthSquared",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structdesignlab_1_1_quaternion.html#a52ffb1d579c2845eb2aa1fbd21fa9750",tooltip="クォータニオンの長さの2乗を返す(ノルムの2乗)．   クォータニオンの長さの2乗は，w^2 + x^2 + y^2 + z^2 で求められる"];
  Node1 -> Node13 [id="edge11_Node000001_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="designlab::RotateVector3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab.html#a88a31cb8dd4fb0891393816ad574b9a8",tooltip="3次元の位置ベクトルを回転させる．"];
  Node13 -> Node14 [id="edge12_Node000013_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="designlab::Quaternion\l::Conjugate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdesignlab_1_1_quaternion.html#af24ef8c57fde648dbc239b6aae7e9414",tooltip="クォータニオンの共役を返す．共役なクォータニオンとは，ベクトル成分の符号を反転させたもの   q = w + xi + yj + zk とすると，qの共役は w - xi - yj - zk となる．回..."];
  Node13 -> Node15 [id="edge13_Node000013_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="designlab::Quaternion\l::Inverse",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdesignlab_1_1_quaternion.html#a5e17d48809b4339ee959c2119a106726",tooltip="クォータニオンの逆数を返す   クォータニオンqの逆数q^-1は，qの共役をノルムで割ったもの"];
  Node15 -> Node14 [id="edge14_Node000015_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node15 -> Node10 [id="edge15_Node000015_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node16 [id="edge16_Node000013_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="designlab::math_util\l::IsEqual",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab_1_1math__util.html#a44a42787b2445c454d3afed817c1769e",tooltip="C++において，小数同士の計算は誤差が出てしまう．誤差込みで値が等しいか調べる．"];
  Node13 -> Node10 [id="edge17_Node000013_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node17 [id="edge18_Node000001_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="CameraStateManager\l::SetCameraQuat",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_state_manager.html#a5f0f8b23dbebccb6f1caec47d9e2fcf0",tooltip="カメラのクォータニオンをセットする"];
  Node17 -> Node9 [id="edge19_Node000017_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node18 [id="edge20_Node000001_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="CameraStateManager\l::SetCameraViewMode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_state_manager.html#aad65bb6b1a42f7d6a41d265ecd324142",tooltip="カメラのモードをセットする．同時にカメラの目標回転角度などを設定する"];
  Node18 -> Node19 [id="edge21_Node000018_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="designlab::math_util\l::ConvertDegToRad",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab_1_1math__util.html#abc4192092188e5fee4a204ace810280f",tooltip="角度をdegからradに変換する関数．"];
  Node1 -> Node20 [id="edge22_Node000001_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="CameraStateManager\l::SetFreeTargetPos",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_state_manager.html#a908c226b9fa277d5eecb159dfa87e343",tooltip="注視点を操作する際の，カメラの注視する座標をセットする"];
}
