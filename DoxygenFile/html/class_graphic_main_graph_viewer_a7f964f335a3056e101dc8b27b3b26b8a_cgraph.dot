digraph "GraphicMainGraphViewer::draw"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="GraphicMainGraphViewer\l::draw",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="HexapodRenderer::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_renderer.html#af729a4665d1f1c156ea4252619b51503",tooltip="ロボットを3D空間に描画する．"];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="my_vec::SVector2::cross",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structmy__vec_1_1_s_vector2.html#ac2b5470c2541a3292a27b38840ebb7c2",tooltip="このベクトルとotherの外積を返す"];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="HexapodStateCalclator\l::getGlobalLegBasePos",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a6929ec7484c6d43815c4b88ba6ab7024",tooltip="脚位置は離散化されて制御されるが，その時の4の位置をグローバル座標で出力する．"];
  Node2 -> Node5 [id="edge4_Node000002_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="HexapodStateCalclator\l::getGlobalLegPos",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a07f1e2f659fb9c34344a6ba821f128cf",tooltip="脚座標は脚の付け根を原点とした座標系なので，それをグローバル座標に変換する．"];
  Node2 -> Node6 [id="edge5_Node000002_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="HexapodStateCalclator\l::isAblePause",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a5e34910a6da418efdc1e1632672f15e7",tooltip="転ばない姿勢かどうか調べる．"];
  Node6 -> Node3 [id="edge6_Node000006_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node7 [id="edge7_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="my_vec::SVector::projectedXY",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structmy__vec_1_1_s_vector.html#ada5408a85d72fdbf6ae0f5f6d42862f7",tooltip="XY平面に射影したベクトルを返す．"];
  Node2 -> Node8 [id="edge8_Node000002_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="HexapodStateCalclator\l::isLegInRange",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a44b81247eee6784742703a394716739d",tooltip="脚が可動範囲内かチェックする．速度重視のため，ざっくりとした計算を行う．"];
  Node8 -> Node9 [id="edge9_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="my_vec::SVector2::length\lSquare",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structmy__vec_1_1_s_vector2.html#a7fa50793aa9b2afa33a1a331169a56e3",tooltip="このベクトルの長さの2乗を返す"];
  Node8 -> Node7 [id="edge10_Node000008_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node11 [id="edge11_Node000008_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="my_math::squared",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacemy__math.html#aacc8f27ccee67f8dd99906b16d707769",tooltip="2乗した値を返す関数．"];
  Node2 -> Node12 [id="edge12_Node000002_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="HexapodStateCalclator\l::isLegInterfering",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a4b7626cfcaab44e79148c5f5b4acd30f",tooltip="脚の干渉をチェックする．"];
  Node12 -> Node13 [id="edge13_Node000012_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="my_vec::SLine2::hasIntersection",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structmy__vec_1_1_s_line2.html#a3599e0d2dcd3d912ccd5fb20ebdb67f7",tooltip="交点が存在しているかどうか調べる関数"];
  Node13 -> Node3 [id="edge14_Node000013_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node12 -> Node7 [id="edge15_Node000012_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node14 [id="edge16_Node000002_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="my_vec::SVector::length",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structmy__vec_1_1_s_vector.html#ab7e048615bd7e965e0be62a3e92a32c1",tooltip="ベクトルの長さを返す．sqrt(ルートの計算)がまぁまぁ重いので，lengthSquareでいいならこっち使うべき．"];
  Node14 -> Node15 [id="edge17_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="my_vec::SVector::lengthSquare",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structmy__vec_1_1_s_vector.html#ad0873be2086aeb705197892cbace0b38",tooltip="ベクトルの長さの2乗を返す．sqrt(ルートの計算)がまぁまぁ重いのでこっちを使えるなら使うべき．"];
  Node2 -> Node7 [id="edge18_Node000002_Node000007",color="steelblue1",style="solid",tooltip=" "];
}
