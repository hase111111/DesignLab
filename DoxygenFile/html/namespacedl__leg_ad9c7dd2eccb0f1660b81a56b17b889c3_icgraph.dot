digraph "dl_leg::isGrounded"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="dl_leg::isGrounded",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="脚番号_leg_num 0 〜 5 に応じて，その脚が接地しているかを調べる． 脚は右前脚を0番として，時計回りに0,1,2,3,4,5となる．左前足が5番．"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="LogFileIO::addLogStringWithNode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_log_file_i_o.html#a32aab8cb6859a86ab047ff266340ae35",tooltip="Logファイルにノードの情報を書き込む"];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="HexapodStateCalclator\l::calculateStaticMargin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a198fd1c8a9ec7f3f68816578eb34f62c",tooltip="静的安定余裕を計算する．"];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="SNode::changeGlobalCenter\lOfMass",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$struct_s_node.html#a76fd4ec299b81b6f7c1f274084236d8f",tooltip="重心位置を変更する関数．"];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="ComMoveNodeCreator\l::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_move_node_creator.html#a7087b7fce9f1a35256246e413eb67ca3",tooltip="重心を平行移動したノードを生成する"];
  Node4 -> Node6 [id="edge5_Node000004_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="ComMoveNodeCreatorHato\l::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_move_node_creator_hato.html#a5802fc7f51b97e5ac1e2b86de24283a6",tooltip="重心を平行移動したノードを生成する"];
  Node4 -> Node7 [id="edge6_Node000004_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="ComSelecter::getComFromPolygon",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_selecter.html#a362bc2b2bba3c9933c01de9c90687691",tooltip="重心を求める"];
  Node7 -> Node5 [id="edge7_Node000007_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 -> Node8 [id="edge8_Node000004_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="GraphicMainTest::update",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_test.html#a661e1c27659f504aeb8acc2ac1a907d6",tooltip="描画画面の更新を行う．純粋仮想関数のため，継承先では必ずoverrideする必要がある．"];
  Node1 -> Node9 [id="edge9_Node000001_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="LegUpDownNodeCreator\l::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_leg_up_down_node_creator.html#a198455a2bb8511c2d77332cae7c4837d",tooltip="重心を平行移動したノードを生成する"];
  Node1 -> Node10 [id="edge10_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="ComUpDownNodeCreator\l::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_up_down_node_creator.html#a05c5f59670bb04307602e98889262fa9",tooltip="重心を平行移動したノードを生成する"];
  Node1 -> Node11 [id="edge11_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="LegDownNodeCreator\l::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_leg_down_node_creator.html#a707f317a560c61d8a88c5f326bd37f2f",tooltip="重心を平行移動したノードを生成する"];
  Node1 -> Node12 [id="edge12_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="HexapodRenderer::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_renderer.html#ada03952583267029a71d57500ec11b70",tooltip="ロボットを3D空間に描画する．"];
  Node12 -> Node13 [id="edge13_Node000012_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="GraphicMainBasic::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_basic.html#ada25886ad88e0cfeeef64e90ff87dbbd",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node12 -> Node14 [id="edge14_Node000012_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="GraphicMainGraphViewer\l::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_graph_viewer.html#a7f964f335a3056e101dc8b27b3b26b8a",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node12 -> Node15 [id="edge15_Node000012_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="GraphicMainTest::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_test.html#a1594f9f66c5fb8fa9a67787463b0c7f5",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node1 -> Node16 [id="edge16_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="ComSelecterHato::getComFrom\lPolygon",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_selecter_hato.html#a5d197b3f6d2759a435d357e67e700d2e",tooltip="重心を求める"];
  Node16 -> Node6 [id="edge17_Node000016_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node17 [id="edge18_Node000001_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="dl_leg::getGroundedLegNum",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__leg.html#acb5f62b8e593cb33e1dff9dc3484db2e",tooltip="接地している脚の本数を返す関数．"];
  Node17 -> Node18 [id="edge19_Node000017_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="dl_leg::getLiftedLegNum",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__leg.html#a02ff9ebb9cfd6a835343a39dc56cc000",tooltip="遊脚している脚の本数を返す関数．"];
  Node18 -> Node19 [id="edge20_Node000018_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="LegHierarchyNodeCreator\l::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_leg_hierarchy_node_creator.html#a7d14b74b36b11760930014a9c54ea2cc",tooltip="重心を平行移動したノードを生成する"];
  Node1 -> Node20 [id="edge21_Node000001_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="dl_leg::getGroundedLegNum\lWithVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__leg.html#af60b226ef6842795e19f7e2943f579d0",tooltip="接地している脚の脚番号0〜5を，引数_res_numberで参照渡しする関数"];
  Node1 -> Node21 [id="edge22_Node000001_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="dl_leg::getLiftedLegNumWith\lVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__leg.html#a7f0087bafff21a191f0f9db91b71e3a7",tooltip="遊脚している脚の脚番号0〜5を，引数_res_numberで参照渡しする関数"];
  Node21 -> Node22 [id="edge23_Node000021_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="LegUpNodeCreator::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_leg_up_node_creator.html#a8fcdcc64f2e29299e392dcf1a2ecd2d0",tooltip="重心を平行移動したノードを生成する"];
  Node1 -> Node23 [id="edge24_Node000001_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="HexapodStateCalclator\l::isAblePause",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a5e34910a6da418efdc1e1632672f15e7",tooltip="転ばない姿勢かどうか調べる．"];
  Node23 -> Node9 [id="edge25_Node000023_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node22 [id="edge26_Node000023_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node12 [id="edge27_Node000023_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node7 [id="edge28_Node000023_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node24 [id="edge29_Node000001_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="HexapodStateCalclator\l::isAllLegInRange",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#af82fbd4d79a2f6e2204a79878ca84dc9",tooltip="全ての接地脚が可動範囲内かチェックする．速度重視のため，ざっくりとした計算を行う．"];
  Node24 -> Node7 [id="edge30_Node000024_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
