digraph "HexapodRenderer::draw"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="HexapodRenderer::draw",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="ロボットを3D空間に描画する．"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="dl_dxlib::convertToDxVec",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__dxlib.html#a5bb048927dd733ecc50f18acdd40a015",tooltip="Dxlibの座標を示すVECTORと，このプログラムで使用しているSVectorを変換する． ロボット座標系は右手座標系，Dxlibは左手座標系(工学は右手・ゲームライブラリは左手が多い気がする)なので..."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="dl_vec::SVector2::cross",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdl__vec_1_1_s_vector2.html#aecae7306706543c778a096d2e522b56c",tooltip="このベクトルとotherの外積を返す"];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="dl_dxlib::drawHexagonalPrism",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__dxlib.html#aeb5d1c259d3ab9dc9ac17161a29a546e",tooltip="3D空間に六角柱を描画する．"];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="dl_dxlib::drawHexagon",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__dxlib.html#a36b086b2d9269fe65393e37c76c675b2",tooltip="3D空間に六角形を描画する．"];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="HexapodStateCalclator\l::getGlobalLegBasePos",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a939f73cf543fd9de5e7fe0320c3c4b6b",tooltip="脚位置は離散化されて制御されるが，その時の4の位置をグローバル座標で出力する．"];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="HexapodStateCalclator\l::getGlobalLegPos",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a1c0a81291fc3bef841c6176c307a9312",tooltip="脚座標は脚の付け根を原点とした座標系なので，それをグローバル座標に変換する．"];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="HexapodStateCalclator\l::isAblePause",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a5e34910a6da418efdc1e1632672f15e7",tooltip="転ばない姿勢かどうか調べる．"];
  Node8 -> Node3 [id="edge8_Node000008_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node9 [id="edge9_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="dl_leg::isGrounded",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__leg.html#ad9c7dd2eccb0f1660b81a56b17b889c3",tooltip="脚番号_leg_num 0 〜 5 に応じて，その脚が接地しているかを調べる． 脚は右前脚を0番として，時計回りに0,1,2,3,4,5となる．左前足が5番．"];
  Node9 -> Node10 [id="edge10_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="dl_leg::isAbleLegNum",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__leg.html#ab2ec160a0610763bdbc702363c0c6267",tooltip="脚を表す番号は，右前脚を 0 として， 0 〜 5 の範囲．その範囲外ならばfalseを返す．"];
  Node8 -> Node11 [id="edge11_Node000008_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="dl_vec::SVector::projectedXY",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdl__vec_1_1_s_vector.html#ab51d1e8d247fffbd26c1127be0976e43",tooltip="XY平面に射影したベクトルを返す．"];
  Node1 -> Node9 [id="edge12_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node12 [id="edge13_Node000001_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="HexapodStateCalclator\l::isLegInRange",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a44b81247eee6784742703a394716739d",tooltip="脚が可動範囲内かチェックする．速度重視のため，ざっくりとした計算を行う．"];
  Node12 -> Node13 [id="edge14_Node000012_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="dl_vec::SVector2::length\lSquare",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdl__vec_1_1_s_vector2.html#a0ae9aed0d5f24a33178262e127c628e8",tooltip="このベクトルの長さの2乗を返す"];
  Node13 -> Node14 [id="edge15_Node000013_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="dl_vec::SVector2::dot",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdl__vec_1_1_s_vector2.html#ae3429e7a27efd0c1ad05f1a23f25d749",tooltip="このベクトルとotherの内積を返す"];
  Node12 -> Node11 [id="edge16_Node000012_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node12 -> Node15 [id="edge17_Node000012_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="dl_math::squared",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__math.html#a760dc9f3f17fe8b38291f79da372095b",tooltip="2乗した値を返す関数．"];
  Node1 -> Node16 [id="edge18_Node000001_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="HexapodStateCalclator\l::isLegInterfering",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a4b7626cfcaab44e79148c5f5b4acd30f",tooltip="脚の干渉をチェックする．"];
  Node16 -> Node17 [id="edge19_Node000016_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="dl_vec::SLine2::hasIntersection",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdl__vec_1_1_s_line2.html#a0638a23cbcc936eb65e284ceca113702",tooltip="交点が存在しているかどうか調べる関数"];
  Node17 -> Node3 [id="edge20_Node000017_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node16 -> Node11 [id="edge21_Node000016_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node18 [id="edge22_Node000001_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="dl_vec::SVector::length",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdl__vec_1_1_s_vector.html#ae3995a28af45772ee7593b40979e8561",tooltip="ベクトルの長さを返す．sqrt(ルートの計算)がまぁまぁ重いので，lengthSquareでいいならこっち使うべき．"];
  Node18 -> Node19 [id="edge23_Node000018_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="dl_vec::SVector::lengthSquare",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdl__vec_1_1_s_vector.html#a4420023e744314ef6d41f21fbd204150",tooltip="ベクトルの長さの2乗を返す．sqrt(ルートの計算)がまぁまぁ重いのでこっちを使えるなら使うべき．"];
  Node1 -> Node11 [id="edge24_Node000001_Node000011",color="steelblue1",style="solid",tooltip=" "];
}
