digraph "my_vec::SVector2::lengthSquare"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="my_vec::SVector2::length\lSquare",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="このベクトルの長さの2乗を返す"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="HexapodStateCalclator\l::isLegInRange",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#ae447520915d36e937962038ea9e81a17",tooltip="脚が可動範囲内かチェックする．速度重視のため，ざっくりとした計算を行う．"];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="HexapodStateCalclator\l::isLegInRange",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a44b81247eee6784742703a394716739d",tooltip="脚が可動範囲内かチェックする．速度重視のため，ざっくりとした計算を行う．"];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="HexapodRenderer::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_renderer.html#ada03952583267029a71d57500ec11b70",tooltip="ロボットを3D空間に描画する．"];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="GraphicMainBasic::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_basic.html#ada25886ad88e0cfeeef64e90ff87dbbd",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node4 -> Node6 [id="edge5_Node000004_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="GraphicMainGraphViewer\l::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_graph_viewer.html#a7f964f335a3056e101dc8b27b3b26b8a",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node4 -> Node7 [id="edge6_Node000004_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="GraphicMainTest::draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_test.html#a1594f9f66c5fb8fa9a67787463b0c7f5",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node3 -> Node8 [id="edge7_Node000003_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="ComSelecterHato::getComFrom\lPolygon",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_selecter_hato.html#ac12ba6d13d4fb7f0bd6b252c06cc5243",tooltip="重心を求める"];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="ComMoveNodeCreatorHato\l::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_move_node_creator_hato.html#a5802fc7f51b97e5ac1e2b86de24283a6",tooltip="重心を平行移動したノードを生成する"];
  Node3 -> Node10 [id="edge9_Node000003_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="HexapodStateCalclator\l::isAllLegInRange",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#af82fbd4d79a2f6e2204a79878ca84dc9",tooltip="全ての接地脚が可動範囲内かチェックする．速度重視のため，ざっくりとした計算を行う．"];
  Node10 -> Node11 [id="edge10_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="ComSelecter::getComFromPolygon",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$class_com_selecter.html#a7557af617255e407ade97899f56c5bc2",tooltip="重心を求める"];
  Node1 -> Node13 [id="edge11_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="my_vec::SVector2::length",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structmy__vec_1_1_s_vector2.html#a342ca71e3c0a99bef64622697c510560",tooltip="このベクトルの長さを返す"];
  Node13 -> Node14 [id="edge12_Node000013_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="ComUpDownNodeCreator\l::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_up_down_node_creator.html#a05c5f59670bb04307602e98889262fa9",tooltip="重心を平行移動したノードを生成する"];
  Node13 -> Node15 [id="edge13_Node000013_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="my_vec::SVector2::normalized",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structmy__vec_1_1_s_vector2.html#a6527b8515f1b2856db9eaa474daba95c",tooltip="このベクトルを正規化したベクトルを返す"];
  Node15 -> Node16 [id="edge14_Node000015_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="HexapodStateCalclator\l::calculateStaticMargin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a198fd1c8a9ec7f3f68816578eb34f62c",tooltip="静的安定余裕を計算する．"];
  Node15 -> Node8 [id="edge15_Node000015_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
