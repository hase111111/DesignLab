digraph "GraphicMainTest::GraphicMainTest"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="GraphicMainTest::Graphic\lMainTest",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="myDxlib3DFunc::convertTo\lDxVec",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacemy_dxlib3_d_func.html#ac2915c6b26f654cd06cef50f8466352f",tooltip="Dxlibの座標を示すVECTORと，このプログラムで使用しているSVectorを変換する． ロボット座標系は右手座標系，Dxlibは左手座標系(工学は右手・ゲームライブラリは左手が多い気がする)なので..."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="SNode::init",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$struct_s_node.html#a12bd25c27bf8460a22087af5ae44838a",tooltip="初期化関数"];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="my_math::generateRandomNumber",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacemy__math.html#aef65fde3633072229bdb6c840f133243",tooltip="指定した範囲内の乱数を生成する．"];
  Node3 -> Node5 [id="edge4_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="HexapodStateCalclator\l::getLocalBaseLegPos",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_state_calclator.html#a4b43a1f03690efd91478b2ec290a2e00",tooltip=" "];
  Node3 -> Node6 [id="edge5_Node000003_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="dl_leg::makeLegState",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedl__leg.html#ae6cda3d2627d7b423793a243f8cb77e9",tooltip="脚状態を作成して返す関数．脚状態は重心パターン，脚の接地・遊脚，離散化した脚位置のデータが含まれる．"];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="ComType::convertComPattern\lToBit",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_com_type.html#ad68857d4fdd3fc1a4c31631655e388a4",tooltip="重心パターンをbitに変換する関数"];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="MapState::init",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_map_state.html#a658eabf1dc87c473fc52693313168f53",tooltip=" "];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="MapCreator::create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_map_creator.html#acdc8d340488d57ec58f71263ace9c4b5",tooltip="マップ情報を与える関数   getMapのオプションはbit演算を利用して複数指定できる．例えば穴あきかつ，階段状にしたいならば，OPTION_PERFORATED | OPTION_STEP と指定す..."];
  Node1 -> Node10 [id="edge9_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="CameraController::setTargetPos",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_camera_controller.html#a216677edea0d4c002f5d23da7f33a22b",tooltip="カメラの注視する目標の座標をセットする．"];
}
