digraph "designlab::leg_func::IsGrounded"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="designlab::leg_func\l::IsGrounded",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="脚番号 leg_index 0 〜 5 に応じて，その脚が接地しているかを調べる．   脚は右前脚を0番として，時計回りに0,1,2,3,4,5となる．左前足が5番．"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="AbstractHexapodStateCalculator\l::CalculateStabilityMargin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_abstract_hexapod_state_calculator.html#a862d9bc1251d1677af060fa8ae3ff8f8",tooltip="安定余裕(Stability Margin))を計算する．詳しくは「不整地における歩行機械の静的安定性評価基準」という論文を読んで欲しい   接地脚を繋いで作られる多角形の辺と重心の距離の最小値を計算す..."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="SNode::ChangeGlobalCenter\lOfMass",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$struct_s_node.html#ac9a0a65876994f41f6980c7e6f8ae54b",tooltip="重心位置を変更する関数．"];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="ComMoveNodeCreatorHato\l::Create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_move_node_creator_hato.html#afbbbd68e3defbeef200f8c4c10013297",tooltip="現在のノードから次のノード群を生成する"];
  Node3 -> Node5 [id="edge4_Node000003_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="GraphicMainTest::Update",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_test.html#a4f7ad32f20357a7eb5ab1a7b1271a916",tooltip="描画画面の更新を行う．純粋仮想関数のため，継承先では必ずoverrideする必要がある．"];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="LegUpDownNodeCreator\l::Create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_leg_up_down_node_creator.html#a3b56cbc29dff2595c55b551a830a0b30",tooltip="現在のノードから次のノード群を生成する"];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="ComUpDownNodeCreator\l::Create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_up_down_node_creator.html#adf62ca1b597e2b7746b9396fc715e809",tooltip="現在のノードから次のノード群を生成する"];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="HexapodRenderer::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_hexapod_renderer.html#a8eae43f9a83c964275d97cd9c73d9451",tooltip="ロボットを3D空間に描画する．"];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="GraphicMainAdvance\l::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_advance.html#a6692e76b6ea8bf3bc16f7e22c0feccbb",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node8 -> Node10 [id="edge9_Node000008_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="GraphicMainBasic::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_basic.html#a1e698ba2d3c8d10a78d37f1be466b061",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node8 -> Node11 [id="edge10_Node000008_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="GraphicMainGraphViewer\l::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_graph_viewer.html#a14795bbb91d4226833221de9ca9f8d8e",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node8 -> Node12 [id="edge11_Node000008_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="GraphicMainTest::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_test.html#a89739811751658e7ad119ceb81eba60d",tooltip="描画を行う．ここでは描画系の処理のみを行い内部のデータを更新しないためconstを付けている．純粋仮想関数．"];
  Node1 -> Node13 [id="edge12_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="StabilityMarginRenderer\l::Draw",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_stability_margin_renderer.html#a798847136070802f8c38a2ec5e71753f",tooltip="ロボットの静的安定余裕(支持脚多角形)を描画する．"];
  Node13 -> Node9 [id="edge13_Node000013_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node10 [id="edge14_Node000013_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node14 [id="edge15_Node000001_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="ComSelecterHato::GetComFrom\lPolygon",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_com_selecter_hato.html#a11ffd1a3a180ba1c165291c2847e5dad",tooltip="重心を求める"];
  Node14 -> Node4 [id="edge16_Node000014_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node15 [id="edge17_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="designlab::leg_func\l::GetGroundedLegIndexByVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab_1_1leg__func.html#ac79059fd4ea5194294609cd6f6834d93",tooltip="接地している脚の脚番号0〜5を，引数res_indexで参照渡しする関数"];
  Node1 -> Node16 [id="edge18_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="designlab::leg_func\l::GetGroundedLegNum",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab_1_1leg__func.html#a410e98538abd3a3346c5223e32100355",tooltip="接地している脚の本数を返す関数．"];
  Node16 -> Node17 [id="edge19_Node000016_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="designlab::leg_func\l::GetLiftedLegNum",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab_1_1leg__func.html#a783362f08ae38b6e3f5cb09aad52d51b",tooltip="遊脚している脚の本数を返す関数．"];
  Node17 -> Node18 [id="edge20_Node000017_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="LegHierarchyNodeCreator\l::Create",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_leg_hierarchy_node_creator.html#aa675602c796e20af5aa27a600ed0c935",tooltip="現在のノードから次のノード群を生成する"];
  Node1 -> Node19 [id="edge21_Node000001_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="designlab::leg_func\l::GetLegGroundedBit",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab_1_1leg__func.html#aba40fd16353e3566503af79fd3bff892",tooltip="脚が接地しているなら1，遊脚を0としたbitで遊脚・接地脚の状態を返す．   例えば 0 番脚のみが遊脚しているなら 0b111 110 を返す．"];
  Node1 -> Node20 [id="edge22_Node000001_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="designlab::leg_func\l::GetLiftedLegIndexByVector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedesignlab_1_1leg__func.html#ab008f25ef39dfb41ee4a76f3c9cc0529",tooltip="遊脚している脚の脚番号0〜5を，引数_res_numberで参照渡しする関数"];
  Node1 -> Node21 [id="edge23_Node000001_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="RobotGraundPointRenderer\l::SetNodeAndSimulationEndNodeIndex",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_robot_graund_point_renderer.html#a01fb9f551ecffb64bca5521a1de2af38",tooltip=" "];
  Node21 -> Node22 [id="edge24_Node000021_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="GraphicMainAdvance\l::Update",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_advance.html#ace2690c4ee9863eb356b7dc352cc9c9d",tooltip="描画画面の更新を行う．純粋仮想関数のため，継承先では必ずoverrideする必要がある．"];
  Node21 -> Node23 [id="edge25_Node000021_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="GraphicMainBasic::Update",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graphic_main_basic.html#a281c12f1a5df1d5dfce7aefad5057985",tooltip="描画画面の更新を行う．純粋仮想関数のため，継承先では必ずoverrideする必要がある．"];
  Node1 -> Node24 [id="edge26_Node000001_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="SNode::ToString",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$struct_s_node.html#afecbd8c0856929090afd022a4c7247eb",tooltip="ノードの情報を文字列に変換する関数．   デバッグ用に詳細な情報を出力する．"];
  Node24 -> Node25 [id="edge27_Node000024_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="GraphViewerSystemMain\l::Main",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_graph_viewer_system_main.html#abe0b743b08c1b9e9970bdc7cd0a63b6b",tooltip="メイン関数"];
  Node24 -> Node26 [id="edge28_Node000024_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="SimulationSystemMain\l::Main",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_simulation_system_main.html#adb7b220bc2f5e2c55bd49e25b8c9345d",tooltip="いままでint mainで行われた処理をまとめたもの．   目標地点へ着くか，歩容計画に失敗した場合に，シミュレーションを終える．   また，規定の回数シミュレーションしたら終了する．"];
}
